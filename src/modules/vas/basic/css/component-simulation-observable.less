//
// The simulation observable widget
// =================================
//

.screen.simulation .observable-target .observable {

	// Put a line through the observable
	border-top: dashed 2px #fff;

	// Vertically centered observable body
	.observable-body {
		position: absolute;
		width: 100%; height: 60px;
		left: 0; top: -30px;
		cursor: pointer;
		
		> .circle {
			position: absolute;
			width: 14px; height: 14px; top: 30px;
			.transform( translateX(-7px) translateY(-7px) );
			.border-radius(10px);
			.transition( ~"left 0.25s, background-color 0.25s, border-color 0.25s" );

			border-style: solid;
			border-width: 2px;
			border-color: #999;
			background-color: #FFF;
			color: #333;

			.label-host {
				position: absolute;
				left: 0; right: 0; width: 100%; height: 100%;
				.transform-origin( 50% 50% );

			    // -------
				// Dynamically updated by JS (reverse of observable)
			    .transform( rotate(-0deg) );
			    // -------

				> .label {
					display: none;
					position: absolute;
					left: 0; width: 100%;
					text-align: center;

					&.label-fit {
						top: 9px;
						font-size: 12px;
						font-weight: bold;
					}
					&.label-error {
						bottom: 10px;
						font-size: 10px;
					}

				}
			}

		}

		> .errorbar {
			.transition( all 0.25s );
			position: absolute;
			top: 30px;
			border-width: 2px;
			border-style: solid;
		}

		> .title {
			color: #999;
			left: 0; right: 0; top: 0; height: 18px;
			padding: 0 10px;
			text-align: right;
			text-overflow: ellipsis;
			overflow: hidden;
		}

		// Hover
		&:hover {
			.circle {

				// Resize the circle
				width: 46px; height: 46px;
				.transform( translateX(-23px) translateY(-23px) );
				.border-radius(46px);

				// Show label
				.label {
					display: block;
				}
			}
		}

	}

	// Helper to flip label when it becomes too tilted
	&.x-flip-label {
		.observable-body > .title {
			.transform( rotate(180deg) );
			text-align: left;
		}
	}

	// Status styling information for the observable
	&.fit-perfect .observable-body {
		> .circle {
			color: #FFF;
			border-color: darken(@tuning-scr-c-good, 10%);
			background-color: @tuning-scr-c-good;
		}
		> .errorbar {
			border-color: darken(@tuning-scr-c-good, 10%);
		}
	}
	&.fit-good .observable-body {
		> .circle {
			color: #FFF;
			border-color: darken(@tuning-scr-c-good, 10%);
			background-color: @tuning-scr-c-good;
		}
		> .errorbar {
			border-color: darken(@tuning-scr-c-good, 10%);
		}
	}
	&.fit-average .observable-body {
		> .circle {
			color: @tuning-scr-c-average;
			border-color: @tuning-scr-c-average;
		}
		> .errorbar {
			border-color: @tuning-scr-c-average;
		}
	}
	&.fit-bad .observable-body {
		> .circle {
			color: @tuning-scr-c-bad;
			border-color: @tuning-scr-c-bad;
		}
		> .errorbar {
			border-color: @tuning-scr-c-bad;
		}
	}


}